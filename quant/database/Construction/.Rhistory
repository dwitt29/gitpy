#Plot
charts.PerformanceSummary(returns)
#Metrics
print(paste("Annual Returns: ",Return.annualized(returns)))
print(paste("Annualized Sharpe: " ,SharpeRatio.annualized(returns)))
print(paste("Max Drawdown: ",maxDrawdown(returns)))
}
pairTradeBacktest <- function(pairData, mean = 35, slippage = -0.0014, startDate = '2004-05-12', endDate = '2015-11-23'){
# At 150 data points
# Critical value at 1% : -3.46
# Critical value at 5% : -2.88
# Critical value at 10% : -2.57
criticalValue = -2.57
##Body of Code
pairData <- PrepareData(pairData)
for(i in 1:length(pairData[,2])){
if(i > 160){
begin = i - mean + 1
end = i
#Calculate Spread
spread = pairData$pairRatio[end]
pairData$spread[end] = spread
#ADF Test
if(adf.test(pairData$spread[(i-150):end], k = 1)[1] <= criticalValue)
pairData$adfTest[end] = 1
else
pairData$adfTest[end] = 0
#Calculate the remainder variables
if(i >= mean){ #&& pairData$Date[end] > startDate && pairData$Date[end] < endDate){
pairData <- GenerateRowValue(begin, end, pairData)
pairData <- GenerateSignal(i, pairData)
currentSignal = pairData$signal[i]
prevSignal = pairData$signal[i-1]
pairData <- GenerateTransactions(currentSignal, prevSignal, i, pairData)
pairData <- GetReturns(i, pairData, slippage)
}
}
}
GenerateReport(pairData, startDate, endDate)
return(pairData)
}
universe <- c('groupppc.csv', 'ppcavenge.csv')
portfolio <- function(names){
group <- pairTradeBacktest(names[1], 35)
ppc <- pairTradeBacktest(names[2]. 35)
totalReturns <- group$TotalReturns + ppc$TotalReturns
totalReturns <- TotalReturns / 2
return(totalReturns)
}
portfolio <- function(names){
group <- pairTradeBacktest(names[1], 35)
ppc <- pairTradeBacktest(names[2]. 35)
totalReturns <- group$TotalReturns + ppc$TotalReturns
totalReturns <- TotalReturns / 2
return(totalReturns)
}
a <- pairTradeBacktest(data, 35)
data <- read.csv('groupmr.csv')
setwd("C:/Users/Administrator/Desktop/QUantInsti Project/database/Construction")
universe <- c('groupppc.csv', 'ppcavenge.csv')
portfolio <- function(names){
group <- pairTradeBacktest(names[1], 35)
ppc <- pairTradeBacktest(names[2]. 35)
totalReturns <- group$TotalReturns + ppc$TotalReturns
totalReturns <- TotalReturns / 2
return(totalReturns)
}
portfolio <- function(names){
group <- pairTradeBacktest(names[1], 35)
ppc <- pairTradeBacktest(names[2]. 35)
totalReturns <- group$TotalReturns + ppc$TotalReturns
totalReturns <- totalReturns / 2
return(totalReturns)
}
portfolio <- function(names){
group <- pairTradeBacktest(names[1], 35)
ppc <- pairTradeBacktest(names[2]. 35)
totalReturns = group$TotalReturns + ppc$TotalReturns
totalReturns = totalReturns / 2
return(totalReturns)
}
portfolio <- function(names){
group <- pairTradeBacktest(names[1], 35)
ppc <- pairTradeBacktest(names[2]. 35)
ret = group$TotalReturns + ppc$TotalReturns
ret = ret / 2
return(ret)
}
portfolio <- function(names){
group <- pairTradeBacktest(names[1], 35)
ppc <- pairTradeBacktest(names[2], 35)
ret = group$TotalReturns + ppc$TotalReturns
ret = ret / 2
return(ret)
}
answer <- portfolio(universe)
universe[1]
portfolio <- function(names){
names = as.vector(names)
group <- pairTradeBacktest(names[1], 35)
ppc <- pairTradeBacktest(names[2], 35)
ret = group$TotalReturns + ppc$TotalReturns
ret = ret / 2
return(ret)
}
answer <- portfolio(universe)
portfolio <- function(names){
names = as.vector(names)
group <- pairTradeBacktest(names[1], 35)
}
answer <- portfolio(universe)
portfolio <- function(names){
names = as.vector(names)
print(names[1])
}
answer <- portfolio(universe)
portfolio <- function(names){
names = as.vector(names)
group <- pairTradeBacktest(read.csv(names[1]), 35)
}
answer <- portfolio(universe)
portfolio <- function(names){
names <- as.vector(names)
group <- pairTradeBacktest(read.csv(names[1]), 35)
ppc <- pairTradeBacktest(read.csv(names[2]), 35)
returns <- group$TotalReturns + ppc$TotalReturns
returns <- returns / 2
returns
}
answer <- portfolio(universe)
portfolio <- function(names){
names <- as.vector(names)
group <- pairTradeBacktest(read.csv(names[1]), 35)
ppc <- pairTradeBacktest(read.csv(names[2]), 35)
returns <- group$TotalReturns + ppc$TotalReturns
returns <- returns / 2
plot(returns)
return(returns)
}
answer <- portfolio(universe)
portfolio <- function(names){
names <- as.vector(names)
group <- pairTradeBacktest(read.csv(names[1]), 35)
ppc <- pairTradeBacktest(read.csv(names[2]), 35)
returns <- group$TotalReturns + ppc$TotalReturns
returns <- returns / 2
print(sum(returns))
return(returns)
}
answer <- portfolio(universe)
portfolio <- function(names){
names <- as.vector(names)
group <- pairTradeBacktest(read.csv(names[1]), 35)
ppc <- pairTradeBacktest(read.csv(names[2]), 35)
returns <- group$TotalReturns + ppc$TotalReturns
print(sum(returns))
return(returns)
}
answer <- portfolio(universe)
data <- read.csv('groupmr.csv')
a <- pairTradeBacktest(data, 35)
group <- pairTradeBacktest(read.csv('groupppc.csv'), 35)
ppc <- pairTradeBacktest(read.csv('ppcavenge.csv'), 35)
returns <- group$TotalReturns + ppc$TotalReturns
print(sum(returns))
portfolio <- function(names){
names <- as.vector(names)
group <- pairTradeBacktest(read.csv(names[1]), 35)
ppc <- pairTradeBacktest(read.csv(names[2]), 35)
returns <- group$TotalReturn + ppc$TotalReturn
print(sum(returns))
return(returns)
}
answer <- portfolio(universe)
setwd("C:/Users/Administrator/Desktop/QUantInsti Project/database/construction")
##Global Var
start = '2009-01-01'
last = '2014-12-31'
final = '2015-11-23'
##Functions
PrepareData <- function(csvData){
csvData$pairRatio = csvData[,2] / csvData[,3]
csvData <- AddColumns(csvData)
csvData$Date = as.Date(csvData$Date)
return(csvData)
}
AddColumns <- function(csvData){
#Add Columns to csvDataframe
csvData$LogA <- log10(csvData[,2])
csvData$LogB <- log10(csvData[,3])
csvData$spread <- 0
csvData$adfTest <- 0
csvData$mean <- 0
csvData$stdev <- 0
csvData$zScore <- 0
csvData$signal <- 0
csvData$BuyPrice <- 0
csvData$SellPrice <- 0
csvData$LongReturn <- 0
csvData$ShortReturn <- 0
csvData$Slippage <- 0
csvData$TotalReturn <- 0
return(csvData)
}
GenerateRowValue <- function(begin, end, csvData){
average <- mean(csvData$spread[begin:end])
stdev <- sd(csvData$spread[begin:end])
csvData$mean[end] <-  average
csvData$stdev[end] <- stdev
csvData$zScore[end] <- (csvData$spread[end]-average)/stdev
return(csvData)
}
GenerateSignal <- function(counter, csvData){
currentSignal = csvData$signal[counter]
prevSignal = csvData$signal[counter-1]
if(csvData$adfTest[counter] == 1)
{
if(currentSignal == -1 && prevSignal == 1)
csvData$signal[counter] <- 0
else if(currentSignal == 1 && prevSignal == -1)
csvData$signal[counter] <- 0
else if(csvData$zScore[counter] > 2)
csvData$signal[counter] <- -1
else if (csvData$zScore[counter] < -2)
csvData$signal[counter] <- 1
else if (csvData$zScore[counter] < 0.3 && csvData$zScore[counter] > -0.3)
csvData$signal[counter] <- 0
else
csvData$signal[counter] <- prevSignal
}
else
csvData$signal[counter] <- 0
return(csvData)
}
GenerateTransactions <- function(currentSignal, prevSignal, end, csvData){
#Set Long Prices
if(currentSignal == 0 && prevSignal == 0)
csvData$BuyPrice[end] <- 0
else if(currentSignal == prevSignal)
csvData$BuyPrice[end] <- csvData$BuyPrice[end-1]
#Short B and Long A
else if(currentSignal == 1 && currentSignal != prevSignal)
csvData$BuyPrice[end] <- csvData[end, 2]
#Short A and Long B
else if(currentSignal == -1 && currentSignal != prevSignal){
csvData$BuyPrice[end] <- csvData[end, 3] * csvData$pairRatio[end]
transactionPairRatio <<- csvData$pairRatio[end]
}
#Close trades
else if(currentSignal == 0 && prevSignal == 1)
csvData$BuyPrice[end] <- csvData[end, 2]
else if(currentSignal == 0 && prevSignal == -1){
csvData$BuyPrice[end] <- csvData[end, 3] * transactionPairRatio
}
#Set Short Prices
if(currentSignal == 0 && prevSignal == 0)
csvData$SellPrice[end] <- 0
else if(currentSignal == prevSignal)
csvData$SellPrice[end] <- csvData$SellPrice[end-1]
#Open Trades
else if(currentSignal == 1 && currentSignal != prevSignal){
csvData$SellPrice[end] <- csvData[end, 3] * csvData$pairRatio[end]
transactionPairRatio <<- csvData$pairRatio[end]
}
else if(currentSignal == -1 && currentSignal != prevSignal)
csvData$SellPrice[end] <- csvData[end, 2]
#Close trades
else if(currentSignal == 0 && prevSignal == 1){
csvData$SellPrice[end] <- csvData[end, 3] * transactionPairRatio
}
else if(currentSignal == 0 && prevSignal == -1)
csvData$SellPrice[end] <- csvData[end, 2]
return(csvData)
}
GetReturns <- function(end, csvData, slippage){
if(csvData$signal[end] == 0 && csvData$signal[end-1] != 0 )
csvData$LongReturn[end] <- (csvData$BuyPrice[end] / csvData$BuyPrice[end-1]) - 1
if(csvData$signal[end] == 0 && csvData$signal[end-1] != 0 )
csvData$ShortReturn[end] <- (csvData$SellPrice[end-1] / csvData$SellPrice[end]) - 1
if(csvData$ShortReturn[end] != 0)
csvData$Slippage[end] <- slippage
if(csvData$ShortReturn[end] != 0 && csvData$LongReturn[end] != 0)
csvData$TotalReturn[end] <- ((csvData$ShortReturn[end] + csvData$LongReturn[end]) / 2) + csvData$Slippage[end]
return(csvData)
}
GenerateReport <- function(pairData, startDate, endDate){
#Subset the dates
returns = xts(pairData$TotalReturn, as.Date(pairData$Date))
returns = returns[paste(startDate,endDate,sep="::")]
#Plot
charts.PerformanceSummary(returns)
#Metrics
print(paste("Annual Returns: ",Return.annualized(returns)))
print(paste("Annualized Sharpe: " ,SharpeRatio.annualized(returns)))
print(paste("Max Drawdown: ",maxDrawdown(returns)))
}
pairTradeBacktest <- function(pairData, mean = 35, slippage = -0.0014, startDate = '2004-05-12', endDate = '2015-11-23'){
# At 150 data points
# Critical value at 1% : -3.46
# Critical value at 5% : -2.88
# Critical value at 10% : -2.57
criticalValue = -2.57
##Body of Code
pairData <- PrepareData(pairData)
for(i in 1:length(pairData[,2])){
if(i > 160){
begin = i - mean + 1
end = i
#Calculate Spread
spread = pairData$pairRatio[end]
pairData$spread[end] = spread
#ADF Test
if(adf.test(pairData$spread[(i-150):end], k = 1)[1] <= criticalValue)
pairData$adfTest[end] = 1
else
pairData$adfTest[end] = 0
#Calculate the remainder variables
if(i >= mean){ #&& pairData$Date[end] > startDate && pairData$Date[end] < endDate){
pairData <- GenerateRowValue(begin, end, pairData)
pairData <- GenerateSignal(i, pairData)
currentSignal = pairData$signal[i]
prevSignal = pairData$signal[i-1]
pairData <- GenerateTransactions(currentSignal, prevSignal, i, pairData)
pairData <- GetReturns(i, pairData, slippage)
}
}
}
GenerateReport(pairData, startDate, endDate)
return(pairData)
}
#A functino that takes 2 strings and outputs the combined returns
universe <- c('groupppc.csv', 'ppcavenge.csv')
portfolio <- function(names){
group <- pairTradeBacktest(read.csv(names[1]), 35)
ppc <- pairTradeBacktest(read.csv(names[2]), 35)
returns <- group$TotalReturn + ppc$TotalReturn
return(returns)
}
answer <- portfolio(universe)
group <- pairTradeBacktest(read.csv('groupppc.csv'), 35)
ppc <- pairTradeBacktest(read.csv('ppcavenge.csv'), 35)
collection <- list(group, ppc)
head(collection)
head(collection[1])
x <- collection(ppc)
collection[]
collection[1]$TotalReturn
collection[[1,2]]
collection[[1]]
c(2,3,4) - c(1,2,3)
universe <- c('groupppc.csv', 'ppcavenge.csv', 'groupmr.csv')
universe <- c('groupppc.csv', 'ppcavenge.csv', 'groupmr.csv')
portfolio <- function(names){
result <- c()
for(i in 1:names){
backtestDF <- pairTradeBacktest(read.csv(i), 35)
result <- c(result, backtestDF$TotalReturn)
}
result
}
answer <- portfolio(universe)
universe <- c('groupppc.csv', 'ppcavenge.csv')
answer <- portfolio(universe)
portfolio <- function(names){
result <- c()
for(i in 1:names){
print(i)
#backtestDF <- pairTradeBacktest(read.csv(i), 35)
#result <- c(result, backtestDF$TotalReturn)
}
#result
}
portfolio(universe)
names <- c('King', 'Queen', 'Prince', 'Duches')
for(i in 1:names){
print(i)
}
for(i in names){
print(i)
}
portfolio <- function(names){
result <- c()
for(i in names){
backtestDF <- pairTradeBacktest(read.csv(i), 35)
result <- c(result, backtestDF$TotalReturn)
}
result
}
answer <- portfolio(universe)
portfolio <- function(names){
result <- data.frame()
for(i in names){
backtestDF <- pairTradeBacktest(read.csv(i), 35)
result <- data.frame(result, backtestDF$TotalReturn)
}
result
}
answer <- portfolio(universe)
portfolio <- function(names){
result <- data.frame()
for(i in names){
backtestDF <- pairTradeBacktest(read.csv(i), 35)
column <- backtestDF$TotalReturn
result <- data.frame(result, coulmn)
}
result
}
answer <- portfolio(universe)
portfolio <- function(names){
result <- data.frame()
for(i in names){
backtestDF <- pairTradeBacktest(read.csv(i), 35)
column <- backtestDF$TotalReturn
result <- data.frame(result, column)
}
result
}
answer <- portfolio(universe)
answer <- 0
one <- c(1,2,3)
two <- c(4,5,6)
three <- c(0,9,8)
answer <- c(one, two, three)
answer
answer[1]
answer <- list(one, two, three)
answer
answer[1]
answer[2]
head(answer[2])
portfolio <- function(names){
result <- list()
for(i in names){
backtestDF <- pairTradeBacktest(read.csv(i), 35)
column <- backtestDF$TotalReturn
#C-sharpe a list that is a collection of lists
result <- list(result, column)
}
result
}
answer <- portfolio(universe)
head(answer[1])
head(answer[[1]])
head(answer[[1:5]])
x <- as.data.frame(answer[1])
x <- as.data.frame(answer[[1]])
dim(answer[1])
dim(answer[[1]])
typeof(answer)
typeof(answer[[1]])
class(answer[[1]])
x <- answer[[1]]
x <- answer[[1:]]
x <- answer[[1]]
x
x <- answer[['']]
x <- colnames(answer)
x
x <- names(answer)
x
x <- names(answer[[1]])
x
portfolio <- function(names){
result <- list()
for(i in names){
backtestDF <- pairTradeBacktest(read.csv(i), 35)
column <- backtestDF$TotalReturn
#C-sharpe a list that is a collection of lists
result <- list(result, i)
}
result
}
answer <- portfolio(universe)
answer
answer[[2]]
answer[[1][2]]
answer[[1]][[2]]
portfolio <- function(names){
result <- list()
for(i in names){
backtestDF <- pairTradeBacktest(read.csv(i), 35)
column <- backtestDF$TotalReturn
#C-sharpe a list that is a collection of lists
result <- list(result, column)
}
result
}
answer <- portfolio(universe)
answer
head(answer[[1][2]])
answer[[2]]
head(answer[[2]])
answer
answer[[1]][[2]]
x <- answer[[1]][[2]] + answer[[2]]
sum(x)
sum(answer[[2]])
sum(answer[[1]][[2]])
portfolio <- function(names){
result <- list()
for(i in names){
backtestDF <- pairTradeBacktest(read.csv(i), 35)
column <- backtestDF$TotalReturn
result <- list(result, column)
}
answer <- data.frame()
for(k in result){
answer <- answer + k
}
answer
}
answer <- portfolio(universe)
